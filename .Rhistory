r1n = lm(Y[index10] ~ 0 + X[index10, ])$coef
r0n = lm(Y[index00] ~ 0 + X[index00, ], weights = w0n)$coef
}
r1a = lm(Y[index11] ~ 0 + X[index11, ], weights = w1a)$coef
r0a = lm(Y[index01] ~ 0 + X[index01, ])$coef
#weighted outcomes
if (trc == F) {
weighted.Y.c1 = Y[index11]*w1c
weighted.Y.c0 = Y[index00]*w0c
weighted.Y.n0 = Y[index00]*w0n
}
weighted.Y.a1 = Y[index11]*w1a
#CACE, NACE and AACE
if (trc == F) {
CACE = mean(weighted.Y.c1) - mean(weighted.Y.c0)
NACE = mean(Y[index10]) - mean(weighted.Y.n0)
}
AACE = mean(weighted.Y.a1) - mean(Y[index01])
#weighted outcomes for regression estimator
if (trc == F) {
weighted.Y1c = (Y[index11]-X[index11, ]%*%r1c)*w1c
weighted.Y0c = (Y[index00]-X[index00, ]%*%r0c)*w0c
weighted.Y1n = Y[index10]-X[index10, ]%*%r1n
weighted.Y0n = (Y[index00]-X[index00, ]%*%r0n)*w0n
weighted.rc = rbind(X[index11, ]*w1c, X[index00, ]*w0c) %*% (r1c - r0c)
weighted.rn = rbind(X[index10, ], X[index00, ]*w0n) %*% (r1n - r0n)
}
weighted.Y1a = (Y[index11]-X[index11, ]%*%r1a)*w1a
weighted.Y0a = Y[index01]-X[index01, ]%*%r0a
weighted.ra = rbind(X[index11, ]*w1a, X[index01, ]) %*% (r1a - r0a)
#CACE, NACE and AACE, regression estimates
if (trc == F) {
CACE.reg = mean(weighted.Y1c) - mean(weighted.Y0c) + mean(weighted.rc)
NACE.reg = mean(weighted.Y1n) - mean(weighted.Y0n) + mean(weighted.rn)
}
AACE.reg = mean(weighted.Y1a) - mean(weighted.Y0a) + mean(weighted.ra)
#results
if (trc == F) {
ACE = list(CACE = CACE, CACE.reg = CACE.reg,
NACE = NACE, NACE.reg = NACE.reg,
AACE = AACE, AACE.reg = AACE.reg,
beta.a = ps.score.fit$beta.a, beta.n = ps.score.fit$beta.n)
}
else {
ACE = list(AACE = AACE, AACE.reg = AACE.reg,
beta.a = ps.score.fit$beta.a, beta.n = ps.score.fit$beta.n)
}
return(ACE)
}
}
res_PS <- PSPS_M_weighting(Z = data_simu$Z,
D = data_simu$S,
X = as.matrix(data_simu[, 2:4]),
Y = data_simu$Y,
trc = FALSE,
ep1 = 1,
ep0 = 1,
beta.a = NULL,
beta.n = NULL)
res2 <- c(res_PS$CACE, res_PS$CACE.reg,
res_PS$NACE, res_PS$NACE.reg,
res_PS$AACE, res_PS$AACE.reg)
library(pace)
install.packages("pace")
library(pace)
res_MR <-  pace::pace(X = as.matrix(data_simu[, c(2:4)]),
Z = data_simu$Z,
S = data_simu$A,
Y = data_simu$Y,
family.Y="gaussian",
nboot = 500 # bootstrap times
)
Y
Y
?pace::pace
res_MR <-  pace::pace(X = as.matrix(data_simu[, c(2:4)]),
Z = data_simu$Z,
S = data_simu$S,
Y = data_simu$Y,
family.Y="gaussian",
nboot = 500 # bootstrap times
)
res_MR
Next, we present the R code for the five estimation methods provided by Jiang et al. (2022), which is in their R pcakge ***pace***. This package can be installed using the following R code and can be found on web page <https://github.com/shuyang-stat/pace>.
res2 <- c(res_PS$AACE, res_PS$AACE.reg,
res_PS$CACE, res_PS$CACE.reg,
res_PS$NACE, res_PS$NACE.reg)
res2
res_MR[11:15]
res_MR[1:5]
# For NACE:
res_MR[6:10]
res_MR[11:15] # mean
res_MR[26:30] #
res_PS$AACE, res_PS$AACE.reg
c(res_PS$AACE, res_PS$AACE.reg)
as.vector(res_MR[11:15])
library(dplyr)
###################################
######  Simulation function  ######
# Based on vaccine data, we have 3 baseline covariates:
#  Sex (binary), transformed variable (binary), age (continuous)
f_sim <- function(N = 200*2, # sample size for two groups
seed = 123, # random seed
pi_Z = 0.5, # treatment propensity score: ratio of treatment / control, constant
ctrl_male_p = 0.5, # ratio of male (control)
trt_male_p = 0.5, # ratio of male (treat)
ctrl_trans_p = 0.8, # ratio of transformed variable (control)
trt_trans_p = 0.8, # ratio of transformed variable (treat)
ctrl_age_mu = 50, # mean of age (control)
ctrl_age_sigma = 8, # sd of age (control)
trt_age_mu = 50, # mean of age (treat)
trt_age_sigma = 8, # sd of age (treat)
S_coef = c(-1, # intercept,
0.15, # coef of Z, previous 0.18991, 2 for part2
0.6, # coef of Sex, previous 0.57866
0.8, # coef of Trans, previous 0.77246
0.05 # coef of Age, previous 0.03093
# 0.3 # coef of unmeasured confounder
), # coef of S's model - c(intercept, Z, Sex, Trans, Age)
Y_coef = c(0.5, # intercept,
-0.7, # coef of Z
0.2, # coef of S
-0.1, # coef of Sex
0.2, # coef of Trans
0.05, # coef of Age
0.02, # coef of Age * Z
-0.03 # coef of Age * S
),
sd_Y_trt = 0.6,
sd_Y_ctrl = 0.65
){
logit <- function(y){
exp(y)/ (exp(y) + 1)
}
set.seed(seed)
Nt <- N * pi_Z # sample size of treatment group
Nc <- N * (1 - pi_Z)  # sample size of control group
## Generate baseline covariates
# Generate data for the treatment group
Trt_Z <-  rep(1, Nt)
Trt_sex <- rbinom(n = Nt, size = 1, prob = trt_male_p) # 1 means male, 0 means female
Trt_trans <- rbinom(n = Nt, size = 1, prob = trt_trans_p)
Trt_age <- rnorm(n = Nt, mean = trt_age_mu, sd = trt_age_sigma)
# Generate data for the control group
Ctrl_Z <-  rep(0, Nc)
Ctrl_sex <- rbinom(n = Nc, size = 1, prob = ctrl_male_p)
Ctrl_trans <- rbinom(n = Nc, size = 1, prob = ctrl_trans_p)
Ctrl_age <- rnorm(n = Nc, mean = ctrl_age_mu, sd = ctrl_age_sigma)
## Generate intermediate variable A = 1, adherence
Trt_X <- matrix(c(rep(1, Nt),
Trt_Z,
Trt_sex,
Trt_trans,
Trt_age),
nrow = Nt,
byrow = F)
Trt_link_S <-  Trt_X %*% S_coef
Trt_prob_S <- logit(Trt_link_S)
Trt_S <- rbinom(length(Trt_prob_S), 1, Trt_prob_S)
Ctrl_X <- matrix(c(rep(1, Nc),
Ctrl_Z,
Ctrl_sex,
Ctrl_trans,
Ctrl_age),
nrow = Nc,
byrow = F)
Ctrl_link_S <-  Ctrl_X %*% S_coef
Ctrl_prob_S <- logit(Ctrl_link_S)
Ctrl_S <- rbinom(length(Ctrl_prob_S), 1, Ctrl_prob_S)
## Generate outcome Y - full model
# generate the residual part
Trt_res <- rnorm(Nt, mean = 0, sd = sd_Y_trt)
Ctrl_res <- rnorm(Nc, mean = 0, sd = sd_Y_ctrl)
Trt_X_Y <- matrix(c(rep(1, Nt),
Trt_Z,
Trt_S,
Trt_sex,
Trt_trans,
Trt_age,
Trt_age * Trt_Z,
Trt_age * Trt_S),
nrow = Nt,
byrow = F)
Trt_Y <- Trt_X_Y %*% Y_coef + Trt_res
Ctrl_X_Y <- matrix(c(rep(1, Nc),
Ctrl_Z,
Ctrl_S,
Ctrl_sex,
Ctrl_trans,
Ctrl_age,
Ctrl_age * Ctrl_Z,
Ctrl_age * Ctrl_S),
nrow = Nc,
byrow = F)
Ctrl_Y <- Ctrl_X_Y %*% Y_coef + Ctrl_res
data <- data.frame(
Z = c(Ctrl_Z, Trt_Z),
Sex = c(Ctrl_sex, Trt_sex),
Ges = c(Ctrl_trans, Trt_trans),
Age = c(Ctrl_age, Trt_age),
S = c(Ctrl_S, Trt_S),
Y = c(Ctrl_Y, Trt_Y)
)
return(data)
}
data_simu <- f_sim(N = 1000*2)
head(data_simu)
rm(list=ls())
library(dplyr)
###################################
######  Simulation function  ######
logit <- function(y){
# exp(1+2*x)/ (exp(1+2*x) + 1)
exp(y)/ (exp(y) + 1)
}
# Based on vaccine data, we have 3 baseline covariates:
#  Sex (binary), Gestational age > 37 or not (binary), age (continuous)
f_sim <- function(N = 200*2, # sample size for two groups
seed = 123, # random seed
pi_A = 0.5, # propensity score: ratio of treatment / control
ctrl_male_p = 0.5, # ratio of male (control)
trt_male_p = 0.5, # ratio of male (treat)
ctrl_ges_p = 0.9, # ratio of gestational age < 37 weeks (control)
trt_ges_p = 0.9, # ratio of gestational age < 37 weeks (treat)
ctrl_age_mu = 0, # mean of age (control)
ctrl_age_sigma = 1.3, # sd of age (control)
trt_age_mu = 0, # mean of age (treat)
trt_age_sigma = 1.3, # sd of age (treat)
A_coef = c(-0.4, # intercept, previous -1.53844
0.15, # coef of Z, previous 0.18991, 2 for part2
0.57, # coef of Sex, previous 0.57866
0.77, # coef of Ges, previous 0.77246
0.28, # coef of Age, previous 0.03093
#-0.1, # coef of Age * Z, previous 0
0.3 # coef of add, previous 0
# -0.1 # coef of add * Z, previous 0
), # coef of S's model - c(intercept, Z, Sex, Ges, Age)
Y_coef = c(0.4, # intercept, previous -0.867746
-0.7, # coef of Z, previous -0.450679
-0.08, # coef of Sex, previous -0.079801
0.2, # coef of Ges, previous 0.211968
0.1, # coef of Age, previous 0.018883
-0.05, # coef of add, previous 0
0.15, # coef of A, previous 0.186370
# -0.3, # coef of Z*(1-A), previous 0
0.1, # coef of Age * A,
-0.05, # coef of add * A,
# 0.03, # coef of Sex * A,
0.1, # coef of Age * Z,
0.05 # coef of add * Z,
),
sd_Y_trt = 0.6,
sd_Y_ctrl = 0.65
){
set.seed(seed)
Nt <- N * pi_A
Nc <- N * (1 - pi_A)
## Generate baseline covariates
# Generate data for the treatment group
Trt_Z <-  rep(1, Nt)
Trt_sex <- rbinom(n = Nt, size = 1, prob = trt_male_p) # 1 means male, 0 means female
Trt_ges <- rbinom(n = Nt, size = 1, prob = trt_ges_p)
# 1 means gestational age >= 37 weeks, 0 means gestational age < 37 weeks
Trt_age <- rnorm(n = Nt, mean = trt_age_mu, sd = trt_age_sigma)
Trt_add <- rnorm(n = Nt, mean = 0, sd = 1)
# We also check the range of this variable, is similar as the range in the original data: (6,12)
# Generate data for the control group
Ctrl_Z <-  rep(0, Nc)
Ctrl_sex <- rbinom(n = Nc, size = 1, prob = ctrl_male_p)
Ctrl_ges <- rbinom(n = Nc, size = 1, prob = ctrl_ges_p)
Ctrl_age <- rnorm(n = Nc, mean = ctrl_age_mu, sd = ctrl_age_sigma)
Ctrl_add <- rnorm(n = Nc, mean = 0, sd = 1)
# We also check the range of this variable, is similar as the range in the original data: (6,12)
## Generate intermediate variable A = 1, adherence
Trt_X <- matrix(c(rep(1, Nt),
Trt_Z,
Trt_sex,
Trt_ges,
Trt_age,
#Trt_age_Z = Trt_age * Trt_Z,
Trt_add),
#Trt_add_Z = Trt_add * Trt_Z),
nrow = Nt,
byrow = F)
# Trt_res_A <- rnorm(Nt, mean = 0, sd = 1)
# Trt_link_A <-  Trt_X %*% A_coef + Trt_res_A
Trt_link_A <-  Trt_X %*% A_coef
Trt_prob_A <- logit(Trt_link_A)
Trt_A <- rbinom(length(Trt_prob_A), 1, Trt_prob_A)
# Trt_A <- ifelse(Trt_prob_A > 0.5, 1, 0) # >0.5 - compliance
# # count non-compliance
hist(Trt_prob_A)
table(Trt_A) / Nt
Ctrl_X <- matrix(c(rep(1, Nc),
Ctrl_Z,
Ctrl_sex,
Ctrl_ges,
Ctrl_age,
#Ctrl_age_Z = Ctrl_age * Ctrl_Z,
Ctrl_add),
#Ctrl_add_Z = Ctrl_add * Trt_Z),
nrow = Nc,
byrow = F)
# Ctrl_res_A <- rnorm(Nc, mean = 0, sd = 1)
# Ctrl_link_A <-  Ctrl_X %*% A_coef + Ctrl_res_A
Ctrl_link_A <-  Ctrl_X %*% A_coef
Ctrl_prob_A <- logit(Ctrl_link_A)
Ctrl_A <- rbinom(length(Ctrl_prob_A), 1, Ctrl_prob_A)
# Ctrl_A <- ifelse(Ctrl_prob_A > 0.5, 1, 0) # >0.5 - compliance
# count non-compliance
hist(Ctrl_prob_A)
table(Ctrl_A) / Nc
# Now the table of S looks similar as the real data
## Generate outcome Y - full model
# generate the residual part
Trt_res <- rnorm(Nt, mean = 0, sd = sd_Y_trt) # sd original = 0.6954
Ctrl_res <- rnorm(Nc, mean = 0, sd = sd_Y_ctrl) # sd original = 0.7
Trt_X_Y <- matrix(c(rep(1, Nt),
Trt_Z,
Trt_sex,
Trt_ges,
Trt_age,
Trt_add,
Trt_A,
# Trt_Z*(1 - Trt_A),
Trt_age * Trt_A,
Trt_add * Trt_A,
# Trt_sex * Trt_A,
Trt_age * Trt_Z,
Trt_add * Trt_Z),
nrow = Nt,
byrow = F)
Trt_Y <- Trt_X_Y %*% Y_coef + Trt_res
Ctrl_X_Y <- matrix(c(rep(1, Nc),
Ctrl_Z,
Ctrl_sex,
Ctrl_ges,
Ctrl_age,
Ctrl_add,
Ctrl_A,
# Ctrl_Z*(1 - Ctrl_A),
Ctrl_age * Ctrl_A,
Ctrl_add * Ctrl_A,
# Ctrl_sex * Ctrl_A,
Ctrl_age * Ctrl_Z,
Ctrl_add * Ctrl_Z),
nrow = Nc,
byrow = F)
Ctrl_Y <- Ctrl_X_Y %*% Y_coef + Ctrl_res
# check Y's value in each strata
Ctrl_Y_com <- Ctrl_Y[which(Ctrl_A == 1) ] # compliance
mean(Ctrl_Y_com)
sd(Ctrl_Y_com)
Ctrl_Y_nocom <- Ctrl_Y[which(Ctrl_A == 0) ] # non-compliance
mean(Ctrl_Y_nocom)
sd(Ctrl_Y_nocom)
Trt_Y_com <- Trt_Y[which(Trt_A == 1) ] # compliance
mean(Trt_Y_com)
sd(Trt_Y_com)
Trt_Y_nocom <- Trt_Y[which(Trt_A == 0) ] # non-compliance
mean(Trt_Y_nocom)
sd(Trt_Y_nocom)
# Now the table of Y looks similar as the real data
data <- data.frame(
Z = c(Ctrl_Z, Trt_Z),
Sex = c(Ctrl_sex, Trt_sex),
Ges = c(Ctrl_ges, Trt_ges),
Age = c(Ctrl_age, Trt_age),
Add = c(Ctrl_add, Trt_add),
A = c(Ctrl_A, Trt_A),
S = c(1-Ctrl_A, 1-Trt_A),
Y = c(Ctrl_Y, Trt_Y)
)
return(data)
}
data <- f_sim(N = 2e+7*2)
data <- f_sim(N = 2e+5*2)
# True value for per-protocol effect
tau_pp <- mean(filter(data, Z == 1, A == 1)$Y) - mean(filter(data, Z == 0, A == 1)$Y)
# PCV 15 & complier  - PCV 13 & complier
tau_pp
tau_itt <- mean(filter(data, Z == 1)$Y) - mean(filter(data, Z == 0)$Y)
tau_itt
set.seed(123)
data <- f_sim(N = 2e+6*2)
# True value for per-protocol effect
tau_pp <- mean(filter(data, Z == 1, S == 1)$Y) - mean(filter(data, Z == 0, S == 1)$Y)
tau_pp
set.seed(123)
data <- f_sim(N = 2e+6*2)
# True value for per-protocol effect
tau_pp <- mean(filter(data, Z == 1, S == 1)$Y) - mean(filter(data, Z == 0, S == 1)$Y)
tau_pp
mean(filter(data, Z == 1, S == 1)$Y) - mean(filter(data, Z == 0, S == 1)$Y)
f_sim(N = 2e+6*2)
library(dplyr)
###################################
######  Simulation function  ######
# Based on vaccine data, we have 3 baseline covariates:
#  Sex (binary), transformed variable (binary), age (continuous)
f_sim <- function(N = 200*2, # sample size for two groups
seed = 123, # random seed
pi_Z = 0.5, # treatment propensity score: ratio of treatment / control, constant
ctrl_male_p = 0.5, # ratio of male (control)
trt_male_p = 0.5, # ratio of male (treat)
ctrl_trans_p = 0.8, # ratio of transformed variable (control)
trt_trans_p = 0.8, # ratio of transformed variable (treat)
ctrl_age_mu = 50, # mean of age (control)
ctrl_age_sigma = 8, # sd of age (control)
trt_age_mu = 50, # mean of age (treat)
trt_age_sigma = 8, # sd of age (treat)
S_coef = c(-1, # intercept,
0.15, # coef of Z, previous 0.18991, 2 for part2
0.6, # coef of Sex, previous 0.57866
0.8, # coef of Trans, previous 0.77246
0.05 # coef of Age, previous 0.03093
# 0.3 # coef of unmeasured confounder
), # coef of S's model - c(intercept, Z, Sex, Trans, Age)
Y_coef = c(0.5, # intercept,
-0.7, # coef of Z
0.2, # coef of S
-0.1, # coef of Sex
0.2, # coef of Trans
0.05, # coef of Age
0.02, # coef of Age * Z
-0.03 # coef of Age * S
),
sd_Y_trt = 0.6,
sd_Y_ctrl = 0.65
){
logit <- function(y){
exp(y)/ (exp(y) + 1)
}
set.seed(seed)
Nt <- N * pi_Z # sample size of treatment group
Nc <- N * (1 - pi_Z)  # sample size of control group
## Generate baseline covariates
# Generate data for the treatment group
Trt_Z <-  rep(1, Nt)
Trt_sex <- rbinom(n = Nt, size = 1, prob = trt_male_p) # 1 means male, 0 means female
Trt_trans <- rbinom(n = Nt, size = 1, prob = trt_trans_p)
Trt_age <- rnorm(n = Nt, mean = trt_age_mu, sd = trt_age_sigma)
# Generate data for the control group
Ctrl_Z <-  rep(0, Nc)
Ctrl_sex <- rbinom(n = Nc, size = 1, prob = ctrl_male_p)
Ctrl_trans <- rbinom(n = Nc, size = 1, prob = ctrl_trans_p)
Ctrl_age <- rnorm(n = Nc, mean = ctrl_age_mu, sd = ctrl_age_sigma)
## Generate intermediate variable A = 1, adherence
Trt_X <- matrix(c(rep(1, Nt),
Trt_Z,
Trt_sex,
Trt_trans,
Trt_age),
nrow = Nt,
byrow = F)
Trt_link_S <-  Trt_X %*% S_coef
Trt_prob_S <- logit(Trt_link_S)
Trt_S <- rbinom(length(Trt_prob_S), 1, Trt_prob_S)
Ctrl_X <- matrix(c(rep(1, Nc),
Ctrl_Z,
Ctrl_sex,
Ctrl_trans,
Ctrl_age),
nrow = Nc,
byrow = F)
Ctrl_link_S <-  Ctrl_X %*% S_coef
Ctrl_prob_S <- logit(Ctrl_link_S)
Ctrl_S <- rbinom(length(Ctrl_prob_S), 1, Ctrl_prob_S)
## Generate outcome Y - full model
# generate the residual part
Trt_res <- rnorm(Nt, mean = 0, sd = sd_Y_trt)
Ctrl_res <- rnorm(Nc, mean = 0, sd = sd_Y_ctrl)
Trt_X_Y <- matrix(c(rep(1, Nt),
Trt_Z,
Trt_S,
Trt_sex,
Trt_trans,
Trt_age,
Trt_age * Trt_Z,
Trt_age * Trt_S),
nrow = Nt,
byrow = F)
Trt_Y <- Trt_X_Y %*% Y_coef + Trt_res
Ctrl_X_Y <- matrix(c(rep(1, Nc),
Ctrl_Z,
Ctrl_S,
Ctrl_sex,
Ctrl_trans,
Ctrl_age,
Ctrl_age * Ctrl_Z,
Ctrl_age * Ctrl_S),
nrow = Nc,
byrow = F)
Ctrl_Y <- Ctrl_X_Y %*% Y_coef + Ctrl_res
data <- data.frame(
Z = c(Ctrl_Z, Trt_Z),
Sex = c(Ctrl_sex, Trt_sex),
Ges = c(Ctrl_trans, Trt_trans),
Age = c(Ctrl_age, Trt_age),
S = c(Ctrl_S, Trt_S),
Y = c(Ctrl_Y, Trt_Y)
)
return(data)
}
data_simu <- f_sim(N = 1000*2)
head(data_simu)
set.seed(123)
data <- f_sim(N = 2e+6*2)
# True value for per-protocol effect
tau_pp <- mean(filter(data, Z == 1, S == 1)$Y) - mean(filter(data, Z == 0, S == 1)$Y)
tau_pp
